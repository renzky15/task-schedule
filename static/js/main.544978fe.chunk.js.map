{"version":3,"sources":["reducers/TaskReducer.js","util/login.js","components/TaskForm.js","components/Task.js","actions/task.js","App.js","store/configStore.js","index.js"],"names":["taskReducerDefaultState","state","action","type","task_payload","filter","id","map","updates","payload","a","config","Accept","axios","post","res","localStorage","setItem","JSON","stringify","login","token","data","results","console","log","TaskForm","props","onDescriptionChange","e","task_msg","target","value","setState","onDateChange","task_date","onTimeChange","task_time","onAssignedUser","assigned_user","onFocusChange","focused","calendarFocused","onSubmit","preventDefault","error","format","toggleClosed","toggleForm","onCancel","task","uuidv4","moment","className","this","style","color","name","placeholder","autoFocus","onChange","date","numberOfMonths","onClick","Component","Task","handleShowForm","handleEdit","selectedTask","find","handleRemove","dispatch","removeTask","length","val","Object","keys","uuid","addTask","index","connect","store","createStore","combineReducers","TaskReducer","window","__REDUX_DEVTOOLS_EXTENSION__","email","password","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.544978fe.chunk.js","sourcesContent":["const taskReducerDefaultState = []\n\nexport default (state = taskReducerDefaultState, action) => {\n    switch (action.type) {\n        case \"ADD_TASK\":\n            return [...state, action.task_payload]\n        case \"REMOVE_TASK\":\n            return state.filter(({ id }) => id !== action.id)\n\n        case \"EDIT_TASK\":\n            return state.map((task_payload) => {\n                if (task_payload.id === action.id) {\n                    return {\n                        ...task_payload,\n                        ...action.updates,\n                    }\n                } else {\n                    return task_payload\n                }\n            })\n        default:\n            return state\n    }\n}\n","import axios from \"axios\"\nexport async function login(payload) {\n    const config = {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n    }\n    try {\n        const res = await axios.post(\n            \"https://stage.api.sloovi.com/login\",\n            payload,\n            config\n        )\n\n        localStorage.setItem(\n            \"login\",\n            JSON.stringify({\n                login: true,\n                token: res.data.results.token,\n            })\n        )\n    } catch (error) {\n        console.log(\"Post not created.\")\n    }\n}\n","import React, { Component } from \"react\"\nimport { SingleDatePicker } from \"react-dates\"\nimport moment from \"moment\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport \"react-dates/lib/css/_datepicker.css\"\nimport \"react-dates/initialize\"\n\nexport class TaskForm extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            id: props.task ? props.task.id : uuidv4(),\n            task_msg: props.task ? props.task.task_msg : \"\",\n            task_date: props.task ? moment(props.task.task_date) : moment(),\n            task_time: props.task ? props.task.task_time : \"\",\n            assigned_user: props.task ? props.task.assigned_user : \"\",\n            calendarFocused: false,\n        }\n    }\n    onDescriptionChange = (e) => {\n        const task_msg = e.target.value\n        this.setState(() => ({ task_msg }))\n    }\n    onDateChange = (task_date) => {\n        if (task_date) {\n            this.setState(() => ({ task_date }))\n        }\n    }\n    onTimeChange = (e) => {\n        const task_time = e.target.value\n        this.setState(() => ({ task_time }))\n    }\n\n    onAssignedUser = (e) => {\n        const assigned_user = e.target.value\n        this.setState(() => ({ assigned_user }))\n    }\n\n    onFocusChange = ({ focused }) => {\n        this.setState(() => ({ calendarFocused: focused }))\n    }\n    onSubmit = (e) => {\n        e.preventDefault()\n\n        if (!this.state.task_date || !this.state.task_time) {\n            this.setState(() => ({\n                error: \"Please provide date and time.\",\n            }))\n        } else {\n            this.setState(() => ({ error: \"\" }))\n            console.log(\"Form submitted!\")\n\n            this.props.onSubmit({\n                id: this.state.id,\n                task_date: this.state.task_date.format(\"MM/DD/YY\"),\n                task_msg: this.state.task_msg,\n                task_time: this.state.task_time,\n                assigned_user: this.state.assigned_user,\n            })\n            this.props.toggleClosed({\n                toggleForm: false,\n            })\n            this.setState(() => ({}))\n        }\n    }\n    onCancel = () => {\n        this.props.toggleClosed({\n            toggleForm: false,\n        })\n        this.setState(() => ({}))\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"task-form-container\">\n                    {this.state.error && (\n                        <p style={{ color: \"red\" }}>{this.state.error}</p>\n                    )}\n                    <form onSubmit={this.onSubmit}>\n                        <div className=\"desc-container\">\n                            <label>Task Description</label>\n                            <input\n                                type=\"test\"\n                                name=\"task_msg\"\n                                placeholder=\"Description\"\n                                autoFocus\n                                onChange={this.onDescriptionChange}\n                                value={this.state.task_msg}\n                            />\n                        </div>\n                        <div className=\"date-time-container\">\n                            <div className=\"date-container\">\n                                <label>Date</label>\n                                <SingleDatePicker\n                                    date={this.state.task_date}\n                                    onDateChange={this.onDateChange}\n                                    focused={this.state.calendarFocused}\n                                    onFocusChange={this.onFocusChange}\n                                    numberOfMonths={1}\n                                />\n                            </div>\n                            <div className=\"time-container\">\n                                <label>Time</label>\n                                <input\n                                    type=\"time\"\n                                    name=\"task_time\"\n                                    placeholder=\"Time\"\n                                    onChange={this.onTimeChange}\n                                    value={this.state.task_time}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"assign-user-container\">\n                            <label>Assign User</label>\n                            <input\n                                type=\"text\"\n                                name=\"assigned_user\"\n                                placeholder=\"User\"\n                                onChange={this.onAssignedUser}\n                                value={this.state.assigned_user}\n                            />\n                        </div>\n                        <div className=\"buttons-container\">\n                            <button id=\"cancel-btn\" onClick={this.onCancel}>\n                                Cancel\n                            </button>\n                            <button id=\"save-btn\">Save</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TaskForm\n","import { React, Component } from \"react\"\nimport TaskForm from \"./TaskForm\"\nimport { addTask, removeTask, editTask } from \"../actions/task\"\nimport { PencilSquare, Trash } from \"react-bootstrap-icons\"\n\nimport { connect } from \"react-redux\"\n\nclass Task extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            toggleForm: false,\n            selectedTask: {},\n        }\n    }\n\n    handleShowForm = () => {\n        this.setState({\n            toggleForm: true,\n        })\n    }\n\n    handleEdit = (id) => {\n        const selectedTask = this.props.task_payload.find(\n            (task) => task.id === id\n        )\n        this.setState({\n            selectedTask,\n            toggleForm: true,\n        })\n    }\n    handleRemove = (id) => {\n        this.props.dispatch(removeTask({ id }))\n    }\n    render() {\n        return (\n            <div>\n                <div className=\"main-container\">\n                    <div className=\"first-container\">\n                        <div className=\"task-count\">\n                            <h4>Tasks</h4> {this.props.task_payload.length}\n                        </div>\n                        <div className=\"task-button\">\n                            <button onClick={this.handleShowForm}>\n                                Add Task\n                            </button>\n                        </div>\n                    </div>\n\n                    {!this.state.toggleForm ? (\n                        <div></div>\n                    ) : (\n                        <TaskForm\n                            task={this.state.selectedTask}\n                            toggleClosed={(val) => this.setState(val)}\n                            onSubmit={(task_payload) => {\n                                Object.keys(this.state.selectedTask).length ===\n                                0\n                                    ? this.props.dispatch(addTask(task_payload))\n                                    : this.props.dispatch(\n                                          editTask(\n                                              task_payload.id,\n                                              task_payload\n                                          )\n                                      )\n                            }}\n                        />\n                    )}\n\n                    <div className=\"task-lists-container\">\n                        <div className=\"task-lists\">\n                            {this.props.task_payload.map((val, index) => (\n                                <div className=\"list\" key={index}>\n                                    <label>{val.task_msg}</label>\n                                    <label>{val.task_date}</label>\n\n                                    <button\n                                        className=\"list-edit-btn\"\n                                        onClick={() => this.handleEdit(val.id)}\n                                    >\n                                        <PencilSquare />\n                                    </button>\n                                    <button\n                                        className=\"list-delete-btn\"\n                                        onClick={() =>\n                                            this.handleRemove(val.id)\n                                        }\n                                    >\n                                        <Trash />\n                                    </button>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        task_payload: state.task_payload,\n    }\n}\nexport default connect(mapStateToProps)(Task)\n","// ADD Task\nimport { v1 as uuid } from \"uuid\"\nexport const addTask = ({\n    assigned_user = \"\",\n    task_date = \"\",\n    task_time = \"\",\n    task_msg = \"\",\n} = {}) => ({\n    type: \"ADD_TASK\",\n    task_payload: {\n        id: uuid(),\n        assigned_user,\n        task_date,\n        task_time,\n        task_msg,\n    },\n})\n// REMOVE Task\nexport const removeTask = ({ id } = {}) => ({\n    type: \"REMOVE_TASK\",\n    id,\n})\n\nexport const editTask = (id, updates) => ({\n    type: \"EDIT_TASK\",\n    id,\n    updates,\n})\n","import \"./App.css\"\nimport configStore from \"./store/configStore\"\nimport { login } from \"./util/login\"\nimport { Provider } from \"react-redux\"\n// import { getUser } from \"./api/task\"\n// import { addTask } from \"./actions/task\"\nimport Task from \"./components/Task\"\n\nconst store = configStore()\nconst payload = {\n    email: \"spicebluetest1@gmail.com\",\n    password: \"12345678\",\n}\n\nlogin(payload)\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <Task />\n        </Provider>\n    )\n}\n\nexport default App\n","import { createStore, combineReducers } from \"redux\"\nimport TaskReducer from \"../reducers/TaskReducer\"\n\nexport default () => {\n    const store = createStore(\n        combineReducers({\n            task_payload: TaskReducer,\n        }),\n        window.__REDUX_DEVTOOLS_EXTENSION__ &&\n            window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n    return store\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport App from \"./App\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n"],"sourceRoot":""}