[{"/home/renz/Desktop/Projects/task-schedule/src/App.js":"1","/home/renz/Desktop/Projects/task-schedule/src/reducers/TaskReducer.js":"2","/home/renz/Desktop/Projects/task-schedule/src/util/Auth.js":"3","/home/renz/Desktop/Projects/task-schedule/src/actions/task.js":"4","/home/renz/Desktop/Projects/task-schedule/src/store/configStore.js":"5","/home/renz/Desktop/Projects/task-schedule/src/index.js":"6","/home/renz/Desktop/Projects/task-schedule/src/api/task.js":"7","/home/renz/Desktop/Projects/task-schedule/src/components/Task.js":"8","/home/renz/Desktop/Projects/task-schedule/src/components/TaskForm.js":"9","/home/renz/Desktop/Projects/task-schedule/src/util/interceptor.js":"10"},{"size":442,"mtime":1607743064897,"results":"11","hashOfConfig":"12"},{"size":775,"mtime":1607668420039,"results":"13","hashOfConfig":"12"},{"size":1148,"mtime":1607749653774,"results":"14","hashOfConfig":"12"},{"size":2798,"mtime":1607744678119,"results":"15","hashOfConfig":"12"},{"size":457,"mtime":1607656086360,"results":"16","hashOfConfig":"12"},{"size":270,"mtime":1607576298819,"results":"17","hashOfConfig":"12"},{"size":1361,"mtime":1607748360238,"results":"18","hashOfConfig":"12"},{"size":4528,"mtime":1607757131169,"results":"19","hashOfConfig":"12"},{"size":5389,"mtime":1613396606751,"results":"20","hashOfConfig":"12"},{"size":499,"mtime":1607745950239,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1wjf3k7",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"39"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/renz/Desktop/Projects/task-schedule/src/App.js",["49"],"/home/renz/Desktop/Projects/task-schedule/src/reducers/TaskReducer.js",["50"],"const taskReducerDefaultState = []\n\nexport default (state = taskReducerDefaultState, action) => {\n    switch (action.type) {\n        case \"ADD_TASK\":\n            return [...state, action.task_payload]\n        case \"FETCH_TASKS\":\n            return [...action.task_payload]\n        case \"REMOVE_TASK\":\n            return state.filter(({ id }) => id !== action.id)\n\n        case \"EDIT_TASK\":\n            return state.map((task_payload) => {\n                if (task_payload.id === action.id) {\n                    return {\n                        ...task_payload,\n                        ...action.updates,\n                    }\n                } else {\n                    return task_payload\n                }\n            })\n        default:\n            return state\n    }\n}\n",["51","52"],"/home/renz/Desktop/Projects/task-schedule/src/util/Auth.js",[],["53","54"],"/home/renz/Desktop/Projects/task-schedule/src/actions/task.js",[],"/home/renz/Desktop/Projects/task-schedule/src/store/configStore.js",["55"],"import { createStore, combineReducers, applyMiddleware, compose } from \"redux\"\nimport TaskReducer from \"../reducers/TaskReducer\"\nimport thunk from \"redux-thunk\"\n\nexport default () => {\n    const composeEnhancer =\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n    const store = createStore(\n        combineReducers({\n            task_payload: TaskReducer,\n        }),\n        composeEnhancer(applyMiddleware(thunk))\n    )\n    return store\n}\n",["56","57"],"/home/renz/Desktop/Projects/task-schedule/src/index.js",[],["58","59"],"/home/renz/Desktop/Projects/task-schedule/src/api/task.js",[],"/home/renz/Desktop/Projects/task-schedule/src/components/Task.js",["60","61"],"import { React, Component } from \"react\"\nimport TaskForm from \"./TaskForm\"\nimport { postTask, putTask, fetchTask, deleteTask } from \"../actions/task\"\nimport { PencilSquare, Trash, Plus } from \"react-bootstrap-icons\"\nimport { connect } from \"react-redux\"\nimport { login, getUser } from \"../api/task\"\n\nclass Task extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            toggleForm: false,\n            selectedTask: {},\n        }\n    }\n\n    handleShowForm = () => {\n        this.setState({\n            toggleForm: true,\n        })\n    }\n\n    handleEdit = (id) => {\n        const selectedTask = this.props.task_payload.find(\n            (task) => task.id === id\n        )\n        this.setState({\n            selectedTask,\n            toggleForm: true,\n        })\n    }\n    handleRemove = (id) => {\n        this.props.deleteTask(id)\n    }\n    componentDidMount() {\n        this.props.fetchTask()\n    }\n    render() {\n        return (\n            <div>\n                <div className=\"main-container\">\n                    <div className=\"first-container\">\n                        <div className=\"task-count\">\n                            <h4>Tasks</h4> {this.props.task_payload.length}\n                        </div>\n                        <div className=\"task-button\">\n                            <button onClick={this.handleShowForm}>\n                                <Plus />\n                            </button>\n                        </div>\n                    </div>\n\n                    {!this.state.toggleForm ? (\n                        <div></div>\n                    ) : (\n                        <TaskForm\n                            task={this.state.selectedTask}\n                            toggleClosed={(val) => this.setState(val)}\n                            onSubmit={(task_payload) => {\n                                Object.keys(this.state.selectedTask).length ===\n                                0\n                                    ? this.props.postTask(task_payload)\n                                    : this.props.putTask(\n                                          this.state.selectedTask.id,\n                                          task_payload\n                                      )\n                            }}\n                        />\n                    )}\n\n                    <div className=\"task-lists-container\">\n                        {this.props.task_payload.map((val, index) => (\n                            <div key={index} className=\"task-lists\">\n                                <div className=\"list\">\n                                    <label>{val.task_msg}</label>\n                                    <label id=\"date-label\">\n                                        {val.task_date}\n                                    </label>\n                                </div>\n                                <div className=\"btn-list\">\n                                    <button\n                                        className=\"list-edit-btn\"\n                                        onClick={() => this.handleEdit(val.id)}\n                                    >\n                                        <PencilSquare />\n                                    </button>\n                                    <button\n                                        className=\"list-delete-btn\"\n                                        onClick={() =>\n                                            this.handleRemove(val.id)\n                                        }\n                                    >\n                                        <Trash />\n                                    </button>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        task_payload: state.task_payload,\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        // This function will be available in component as `this.props.fetchTask`\n\n        fetchTask: function () {\n            dispatch(fetchTask())\n        },\n        postTask: function (task_payload) {\n            dispatch(postTask(task_payload))\n        },\n        putTask: function (id, task_payload) {\n            dispatch(putTask(id, task_payload))\n        },\n        deleteTask: function (id) {\n            dispatch(deleteTask(id))\n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Task)\n","/home/renz/Desktop/Projects/task-schedule/src/components/TaskForm.js",[],"/home/renz/Desktop/Projects/task-schedule/src/util/interceptor.js",["62"],{"ruleId":"63","severity":1,"message":"64","line":8,"column":10,"nodeType":"65","messageId":"66","endLine":8,"endColumn":15},{"ruleId":"67","severity":1,"message":"68","line":3,"column":1,"nodeType":"69","endLine":26,"endColumn":2},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"70","replacedBy":"74"},{"ruleId":"72","replacedBy":"75"},{"ruleId":"67","severity":1,"message":"68","line":5,"column":1,"nodeType":"69","endLine":15,"endColumn":2},{"ruleId":"70","replacedBy":"76"},{"ruleId":"72","replacedBy":"77"},{"ruleId":"70","replacedBy":"78"},{"ruleId":"72","replacedBy":"79"},{"ruleId":"63","severity":1,"message":"64","line":6,"column":10,"nodeType":"65","messageId":"66","endLine":6,"endColumn":15},{"ruleId":"63","severity":1,"message":"80","line":6,"column":17,"nodeType":"65","messageId":"66","endLine":6,"endColumn":24},{"ruleId":"67","severity":1,"message":"68","line":4,"column":1,"nodeType":"69","endLine":20,"endColumn":2},"no-unused-vars","'login' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["81"],"no-negated-in-lhs",["82"],["81"],["82"],["81"],["82"],["81"],["82"],"'getUser' is defined but never used.","no-global-assign","no-unsafe-negation"]